@{
    ViewBag.Title = "Index";
}  
<script src="~/Scripts/angular.min.js"></script>
<script src="~/Scripts/ng-infinite-scroll.min.js"></script>
<script src="~/Scripts/jquery-3.1.0.min.js"></script>

<h2>Read all the books</h2>
<br/>
<div ng-app="AngularBookApp" ng-controller="AngularBookCntrl">
    <table>
        <tr>            
            <td>
                <span class="glyphicon glyphicon-search" aria-hidden="true" > Search</span>
                <input type="text" ng-model="search[searchBy]"  class="srch" value="Book Name..."  autofocus/>
            </td>                
        </tr>
        
    </table>
    <hr/>
    <p>
        @if (User.Identity.IsAuthenticated)
        {
            <button type="button" class="btn btn-default" aria-label="Left Align">
                <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                @Html.ActionLink(" Create New", "Create")
            </button>
        }
    </p>


    @{if (User.Identity.IsAuthenticated)
        {
            <table class="table">
                <tr>
                    <th style="width:30%;">
                    </th>
                    <th>
                       Title
                    </th>
                    <th>
                        Price
                    </th>
                </tr> 
                
                    <tr ng-repeat="b in BooksList | filter:search | orderBy:'Title'" >
                        <td>
                            <img src="~/Picture/{{b.Picture}}" style="width:30%;" class="img-thumbnail" />
                        </td>
                        <td>
                            {{b.Title}}
                        </td>
                        <td>
                            {{b.Price + b.Tel_Code}} $
                        </td>
                        <td>
                            @if (User.Identity.IsAuthenticated)
                            {
                                <a data-ng-href="@Url.Action("Edit", "Books")/{{b.BookID}}">Edit  </a>
                                <a data-ng-href="@Url.Action("Delete", "Books")/{{b.BookID}}">Delete  </a>
                            }
                            <a data-ng-href="@Url.Action("Details", "Books")/{{b.BookID}}">Details  </a>
                        </td>
                    </tr>
                
</table>
        }
        else
        {
            <div class="myCass-ForBookDiv" ng-repeat="b in BooksList | filter:search | orderBy:'Title'" >

                <div>
                    <a data-ng-href="@Url.Action("Details", "Books")/{{b.BookID}}" class="port">
                       
                            <img src="~/Picture/{{b.Picture}}" style="width:50%;" class="img-thumbnail" />
                       
                            <p style="color:black;">  {{b.Title}}</p>
                            @*<span style="color:lawngreen;">{{b.Price + b.Tel_Code}} $ </span>*@
                    </a>
                </div>
            </div>
        }
}
</div>

<script>
    var app = angular.module("AngularBookApp", []);

        app.controller("AngularBookCntrl", function ($scope, AngularBookService) {

        GetAllBooks();
        $scope.search = {};
        $scope.searchBy = 'Title';
       
        $scope.sort = function (keyname) {
            $scope.sortKey = keyname;
            $scope.reverse = !$scope.reverse;
        }

        function GetAllBooks() {
            var getData = AngularBookService.getBooks();

                getData.then(function (emp) {
                $scope.BooksList = emp.data;
            });
        }        
        });


    app.service("AngularBookService", function ($http) {

        this.getBooks = function () {
            return $http.get("/Books/getAll");
        };
    });
</script>



<script>
    function PagerService() {
        // service definition
        var service = {};

        service.GetPager = GetPager;

        return service;

        // service implementation
        function GetPager(totalItems, currentPage, pageSize) {
            // default to first page
            currentPage = currentPage || 1;

            // default page size is 10
            pageSize = pageSize || 10;

            // calculate total pages
            var totalPages = Math.ceil(totalItems / pageSize);

            var startPage, endPage;
            if (totalPages <= 10) {
                // less than 10 total pages so show all
                startPage = 1;
                endPage = totalPages;
            } else {
                // more than 10 total pages so calculate start and end pages
                if (currentPage <= 6) {
                    startPage = 1;
                    endPage = 10;
                } else if (currentPage + 4 >= totalPages) {
                    startPage = totalPages - 9;
                    endPage = totalPages;
                } else {
                    startPage = currentPage - 5;
                    endPage = currentPage + 4;
                }
            }

            // calculate start and end item indexes
            var startIndex = (currentPage - 1) * pageSize;
            var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);

            // create an array of pages to ng-repeat in the pager control
            var pages = _.range(startPage, endPage + 1);

            // return object with all pager properties required by the view
            return {
                totalItems: totalItems,
                currentPage: currentPage,
                pageSize: pageSize,
                totalPages: totalPages,
                startPage: startPage,
                endPage: endPage,
                startIndex: startIndex,
                endIndex: endIndex,
                pages: pages
            };
        }
    }


    function ExampleController(PagerService) {
        var vm = this;

        vm.dummyItems = _.range(1, 151); // dummy array of items to be paged
        vm.pager = {};
        vm.setPage = setPage;

        initController();

        function initController() {
            // initialize to page 1
            vm.setPage(1);
        }

        function setPage(page) {
            if (page < 1 || page > vm.pager.totalPages) {
                return;
            }

            // get pager object from service
            vm.pager = PagerService.GetPager(vm.dummyItems.length, page);

            // get current page of items
            vm.items = vm.dummyItems.slice(vm.pager.startIndex, vm.pager.endIndex + 1);
        }
    }
</script>


@*<div ng-controller="ExampleController as vm" class="container">
    <div class="text-center">
        <h1>AngularJS - Pagination Example with logic like Google</h1>

        <!-- items being paged -->
        <div ng-repeat="item in vm.items">Item {{item}}</div>

        <!-- pager -->
        <ul ng-if="vm.pager.pages.length" class="pagination">
            <li ng-class="{disabled:vm.pager.currentPage === 1}">
                <a ng-click="vm.setPage(1)">First</a>
            </li>
            <li ng-class="{disabled:vm.pager.currentPage === 1}">
                <a ng-click="vm.setPage(vm.pager.currentPage - 1)">Previous</a>
            </li>
            <li ng-repeat="page in vm.pager.pages" ng-class="{active:vm.pager.currentPage === page}">
                <a ng-click="vm.setPage(page)">{{page}}</a>
            </li>
            <li ng-class="{disabled:vm.pager.currentPage === vm.pager.totalPages}">
                <a ng-click="vm.setPage(vm.pager.currentPage + 1)">Next</a>
            </li>
            <li ng-class="{disabled:vm.pager.currentPage === vm.pager.totalPages}">
                <a ng-click="vm.setPage(vm.pager.totalPages)">Last</a>
            </li>
        </ul>
    </div>
</div>*@
